#include "include/abstracteventonshortestpath.h"

Point SPV::EventOnShortestPath::getStartPoint() {
    return startPoint;
}
Point SPV::EventOnShortestPath::getEndPoint() {
    return endPoint;
}

Point SPV::EventOnShortestPath::getStartPointIntersection() {
    return startPointIntersection;
}

Point SPV::EventOnShortestPath::getEndPointIntersection() {
    return endPointIntersection;
}

void SPV::EventOnShortestPath::setStartPointIntersection(Point p) {
    startPointIntersection = p;
}

void SPV::EventOnShortestPath::setEndPointIntersection(Point p) {
    endPointIntersection = p;
}

void SPV::EventOnShortestPath::calculateIntersection(Point segPoint1, Point segPoint2, bool startToEnd) {
    Ray r;
    Segment s = Segment(segPoint1, segPoint2);

    if (startToEnd) {
        r = Ray(startPoint, endPoint);
    } else {
        r = Ray(endPoint, startPoint);
    }
    CGAL::cpp11::result_of<Intersect_2(Ray, Segment)>::type
        result = intersection(r, s);
    if (result) {
        if (const Point* p = boost::get<Point>(&*result)) {
            if (startToEnd) {
                startPointIntersection = Point(startPoint.x(), startPoint.y());
                endPointIntersection = Point(p->x(), p->y());
            } else {
                startPointIntersection = Point(p->x(), p->y());
            }
        }
    }
}
